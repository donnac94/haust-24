{\rtf1\mac\ansicpg10000\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 You will provide your solution to the Data Lab by\
editing the collection of functions in this source file.\
\
INTEGER CODING RULES:\
\
  Replace the "return" statement in each function with one\
  or more lines of C code that implements the function. Your code\
  must conform to the following style:\
\
  int Funct(arg1, arg2, ...) \{\
      /* brief description of how your implementation works */\
      int var1 = Expr1;\
      ...\
      int varM = ExprM;\
\
      varJ = ExprJ;\
      ...\
      varN = ExprN;\
      return ExprR;\
  \}\
\
  Each "Expr" is an expression using ONLY the following:\
  1. Integer constants 0 through 255 (0xFF), inclusive. You are\
      not allowed to use big constants such as 0xffffffff.\
  2. Function arguments and local variables (no global variables).\
  3. Unary integer operations ! ~\
  4. Binary integer operations & ^ | + << >>\
\
  Some of the problems restrict the set of allowed operators even further.\
  Each "Expr" may consist of multiple operators. You are not restricted to\
  one operator per line.\
\
  You are expressly forbidden to:\
  1. Use any control constructs such as if, do, while, for, switch, etc.\
  2. Define or use any macros.\
  3. Define any additional functions in this file.\
  4. Call any functions.\
  5. Use any other operations, such as &&, ||, -, or ?:\
"bits.c" 380L, 11026C                                                                                                                                                                               1,1           Top\
/*\
 * CS:APP Data Lab\
 *\
 * <Please put your name and userid here>\
 *\
 * bits.c - Source file with your solutions to the Lab.\
 *          This is the file you will hand in to your instructor.\
 *\
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc\
 * compiler. You can still use printf for debugging without including\
 * <stdio.h>, although you might get a compiler warning. In general,\
 * it's not good practice to ignore compiler warnings, but in this\
 * case it's OK.\
 */\
\
#if 0\
/*\
 * Instructions to Students:\
 *\
 * STEP 1: Read the following instructions carefully.\
 */\
\
You will provide your solution to the Data Lab by\
editing the collection of functions in this source file.\
\
INTEGER CODING RULES:\
\
  Replace the "return" statement in each function with one\
  or more lines of C code that implements the function. Your code\
  must conform to the following style:\
\
  int Funct(arg1, arg2, ...) \{\
      /* brief description of how your implementation works */\
      int var1 = Expr1;\
      ...\
      int varM = ExprM;\
\
      varJ = ExprJ;\
      ...\
      varN = ExprN;\
      return ExprR;\
  \}\
\
  Each "Expr" is an expression using ONLY the following:\
  1. Integer constants 0 through 255 (0xFF), inclusive. You are\
      not allowed to use big constants such as 0xffffffff.\
  2. Function arguments and local variables (no global variables).\
  3. Unary integer operations ! ~\
  4. Binary integer operations & ^ | + << >>\
\
  Some of the problems restrict the set of allowed operators even further.\
  Each "Expr" may consist of multiple operators. You are not restricted to\
  one operator per line.\
\
  You are expressly forbidden to:\
  1. Use any control constructs such as if, do, while, for, switch, etc.\
  2. Define or use any macros.\
  3. Define any additional functions in this file.\
  4. Call any functions.\
  5. Use any other operations, such as &&, ||, -, or ?:\
  6. Use any form of casting.\
  7. Use any data type other than int.  This implies that you\
     cannot use arrays, structs, or unions.\
\
\
  You may assume that your machine:\
  1. Uses 2s complement, 32-bit representations of integers.\
  2. Performs right shifts arithmetically.\
  3. Has unpredictable behavior when shifting an integer by more\
     than the word size.\
\
EXAMPLES OF ACCEPTABLE CODING STYLE:\
  /*\
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31\
   */\
  int pow2plus1(int x) \{\
     // exploit ability of shifts to compute powers of 2\
     int result= 1 << x;\
     // and add the 1\
     result = result + 1;\
     return result;\
  \}\
\
  /*\
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31\
   */\
  int pow2plus4(int x) \{\
     // exploit ability of shifts to compute powers of 2\
     int result = (1 << x);\
     result += 4;\
     return result;\
  \}\
\
FLOATING POINT CODING RULES\
\
For the problems that require you to implent floating-point operations,\
the coding rules are less strict.  You are allowed to use looping and\
conditional control.  You are allowed to use both ints and unsigneds.\
You can use arbitrary integer and unsigned constants.\
\
You are expressly forbidden to:\
  1. Define or use any macros.\
  2. Define any additional functions in this file.\
  3. Call any functions.\
  4. Use any form of casting.\
  5. Use any data type other than int or unsigned.  This means that you\
     cannot use arrays, structs, or unions.\
  6. Use any floating point data types, operations, or constants.\
\
\
NOTES:\
  1. Use the dlc (data lab checker) compiler (described in the handout) to\
     check the legality of your solutions.\
  2. Each function has a maximum number of operators (! ~ & ^ | + << >>)\
     that you are allowed to use for your implementation of the function.\
     The max operator count is checked by dlc. Note that '=' is not\
     counted; you may use as many of these as you want without penalty.\
  3. Use the btest test harness to check your functions for correctness.\
  4. Use the BDD checker to formally verify your functions\
  5. The maximum number of ops for each function is given in the\
     header comment for each function. If there are any inconsistencies\
     between the maximum ops in the writeup and in this file, consider\
     this file the authoritative source.\
\
/*\
 * STEP 2: Modify the following functions according the coding rules.\
 *\
 *   IMPORTANT. TO AVOID GRADING SURPRISES:\
 *   1. Use the dlc compiler to check that your solutions conform\
 *      to the coding rules.\
 *   2. Use the BDD checker to formally verify that your solutions produce\
 *      the correct answers.\
 */\
\
\
#endif\
/* Copyright (C) 1991-2018 Free Software Foundation, Inc.\
   This file is part of the GNU C Library.\
\
   The GNU C Library is free software; you can redistribute it and/or\
   modify it under the terms of the GNU Lesser General Public\
   License as published by the Free Software Foundation; either\
   version 2.1 of the License, or (at your option) any later version.\
\
   The GNU C Library is distributed in the hope that it will be useful,\
   but WITHOUT ANY WARRANTY; without even the implied warranty of\
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\
   Lesser General Public License for more details.\
\
   You should have received a copy of the GNU Lesser General Public\
   License along with the GNU C Library; if not, see\
   <http://www.gnu.org/licenses/>.  */\
/* This header is separate from features.h so that the compiler can\
   include it implicitly at the start of every compilation.  It must\
   not itself include <features.h> or any other header that includes\
/*\
 * CS:APP Data Lab\
 *\
 * <Please put your name and userid here>\
 *\
 * bits.c - Source file with your solutions to the Lab.\
 *          This is the file you will hand in to your instructor.\
 *\
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc\
 * compiler. You can still use printf for debugging without including\
 * <stdio.h>, although you might get a compiler warning. In general,\
 * it's not good practice to ignore compiler warnings, but in this\
 * case it's OK.\
 */\
\
#if 0\
/*\
 * Instructions to Students:\
 *\
 * STEP 1: Read the following instructions carefully.\
 */\
\
You will provide your solution to the Data Lab by\
editing the collection of functions in this source file.\
\
INTEGER CODING RULES:\
\
  Replace the "return" statement in each function with one\
  or more lines of C code that implements the function. Your code\
  must conform to the following style:\
\
  int Funct(arg1, arg2, ...) \{\
      /* brief description of how your implementation works */\
      int var1 = Expr1;\
      ...\
      int varM = ExprM;\
\
      varJ = ExprJ;\
      ...\
      varN = ExprN;\
      return ExprR;\
  \}\
\
  Each "Expr" is an expression using ONLY the following:\
  1. Integer constants 0 through 255 (0xFF), inclusive. You are\
      not allowed to use big constants such as 0xffffffff.\
  2. Function arguments and local variables (no global variables).\
  3. Unary integer operations ! ~\
  4. Binary integer operations & ^ | + << >>\
\
  Some of the problems restrict the set of allowed operators even further.\
  Each "Expr" may consist of multiple operators. You are not restricted to\
  one operator per line.\
\
  You are expressly forbidden to:\
  1. Use any control constructs such as if, do, while, for, switch, etc.\
  2. Define or use any macros.\
  3. Define any additional functions in this file.\
  4. Call any functions.\
  5. Use any other operations, such as &&, ||, -, or ?:\
  6. Use any form of casting.\
  7. Use any data type other than int.  This implies that you\
     cannot use arrays, structs, or unions.\
\
\
  You may assume that your machine:\
  1. Uses 2s complement, 32-bit representations of integers.\
  2. Performs right shifts arithmetically.\
  3. Has unpredictable behavior when shifting an integer by more\
     than the word size.\
\
EXAMPLES OF ACCEPTABLE CODING STYLE:\
  /*\
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31\
   */\
  int pow2plus1(int x) \{\
     // exploit ability of shifts to compute powers of 2\
     int result= 1 << x;\
     // and add the 1\
     result = result + 1;\
     return result;\
  \}\
\
  /*\
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31\
   */\
  int pow2plus4(int x) \{\
     // exploit ability of shifts to compute powers of 2\
     int result = (1 << x);\
     result += 4;\
     return result;\
  \}\
\
FLOATING POINT CODING RULES\
\
For the problems that require you to implent floating-point operations,\
the coding rules are less strict.  You are allowed to use looping and\
conditional control.  You are allowed to use both ints and unsigneds.\
You can use arbitrary integer and unsigned constants.\
\
You are expressly forbidden to:\
  1. Define or use any macros.\
  2. Define any additional functions in this file.\
  3. Call any functions.\
  4. Use any form of casting.\
  5. Use any data type other than int or unsigned.  This means that you\
     cannot use arrays, structs, or unions.\
  6. Use any floating point data types, operations, or constants.\
\
\
NOTES:\
  1. Use the dlc (data lab checker) compiler (described in the handout) to\
     check the legality of your solutions.\
  2. Each function has a maximum number of operators (! ~ & ^ | + << >>)\
     that you are allowed to use for your implementation of the function.\
     The max operator count is checked by dlc. Note that '=' is not\
     counted; you may use as many of these as you want without penalty.\
  3. Use the btest test harness to check your functions for correctness.\
  4. Use the BDD checker to formally verify your functions\
  5. The maximum number of ops for each function is given in the\
     header comment for each function. If there are any inconsistencies\
     between the maximum ops in the writeup and in this file, consider\
     this file the authoritative source.\
\
/*\
 * STEP 2: Modify the following functions according the coding rules.\
 *\
 *   IMPORTANT. TO AVOID GRADING SURPRISES:\
 *   1. Use the dlc compiler to check that your solutions conform\
 *      to the coding rules.\
 *   2. Use the BDD checker to formally verify that your solutions produce\
 *      the correct answers.\
 */\
\
\
#endif\
/* Copyright (C) 1991-2018 Free Software Foundation, Inc.\
   This file is part of the GNU C Library.\
\
   The GNU C Library is free software; you can redistribute it and/or\
   modify it under the terms of the GNU Lesser General Public\
   License as published by the Free Software Foundation; either\
   version 2.1 of the License, or (at your option) any later version.\
\
   The GNU C Library is distributed in the hope that it will be useful,\
   but WITHOUT ANY WARRANTY; without even the implied warranty of\
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\
   Lesser General Public License for more details.\
\
   You should have received a copy of the GNU Lesser General Public\
   License along with the GNU C Library; if not, see\
   <http://www.gnu.org/licenses/>.  */\
/* This header is separate from features.h so that the compiler can\
   include it implicitly at the start of every compilation.  It must\
   not itself include <features.h> or any other header that includes\
   <features.h> because the implicit include comes before any feature\
   test macros that may be defined in a source file before it first\
   explicitly includes a system header.  GCC knows the name of this\
   header in order to preinclude it.  */\
/* glibc's intent is to support the IEC 559 math functionality, real\
   and complex.  If the GCC (4.9 and later) predefined macros\
   specifying compiler intent are available, use them to determine\
   whether the overall intent is to support these features; otherwise,\
   presume an older compiler has intent to support these features and\
   define these macros by default.  */\
/* wchar_t uses Unicode 10.0.0.  Version 10.0 of the Unicode Standard is\
   synchronized with ISO/IEC 10646:2017, fifth edition, plus\
   the following additions from Amendment 1 to the fifth edition:\
   - 56 emoji characters\
   - 285 hentaigana\
   - 3 additional Zanabazar Square characters */\
\
/*\
 * negate - return -x\
 *   Example: negate(1) = -1.\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 5\
 *   Rating: 2\
 */\
int negate(int x) \{\
  return 2;\
\}\
/*\
 * allOddBits - return 1 if all odd-numbered bits in word set to 1\
 *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 12\
 *   Rating: 2\
 */\
int allOddBits(int x) \{\
  return 2;\
\}\
\
// Not so hard:\
/*\
 * TMax - return maximum two's complement integer\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 4\
 *   Rating: 1\
 */\
int tmax(void) \{\
  return 2;\
\}\
\
/*\
 * bitOr - x|y using only ~ and &\
 *   Example: bitOr(6, 5) = 7\
 *   Legal ops: ~ &\
 *   Max ops: 8\
 *   Rating: 1\
 */\
\
int bitOr(int x, int y) \{\
  return 2;\
\}\
\
/*\
 * isEqual - return 1 if x == y, and 0 otherwise\
 *   Examples: isEqual(5,5) = 1, isEqual(4,5) = 0\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 5\
 *   Rating: 2\
 */\
\
int isEqual(int x, int y) \{\
  return 2;\
\}\
\
/*\
 * isTmax - returns 1 if x is the maximum, two's complement number,\
 *     and 0 otherwise\
 *   Legal ops: ! ~ & ^ | +\
 *   Max ops: 10\
 *   Rating: 2\
 */\
int isTmax(int x) \{\
  return 2;\
\}\
\
/*\
 * getByte - Extract byte n from word x\
 *   Bytes numbered from 0 (LSB) to 3 (MSB)\
 *   Examples: getByte(0x12345678,1) = 0x56\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 6\
 *   Rating: 2\
 */\
\
int getByte(int x, int n) \{\
  return 2;\
\}\
\
// Harder:\
\
/*\
 * replaceByte(x,n,c) - Replace byte n in x with c\
 *   Bytes numbered from 0 (LSB) to 3 (MSB)\
 *   Examples: replaceByte(0x12345678,1,0xab) = 0x1234ab78\
 *   You can assume 0 <= n <= 3 and 0 <= c <= 255\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 10\
 *   Rating: 3\
 */\
int replaceByte(int x, int n, int c) \{\
  return 2;\
\}\
\
/*\
 * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9')\
 *   Example: isAsciiDigit(0x35) = 1.\
 *            isAsciiDigit(0x3a) = 0.\
 *            isAsciiDigit(0x05) = 0.\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 15\
 *   Rating: 3\
 */\
int isAsciiDigit(int x) \{\
  return 2;\
\}\
\
/*\
 * addOK - Determine if can compute x+y without overflow\
 *   Example: addOK(0x80000000,0x80000000) = 0,\
 *            addOK(0x80000000,0x70000000) = 1,\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 20\
 *   Rating: 3\
 */\
int addOK(int x, int y) \{\
  return 2;\
\}\
\
/*\
 * logicalShift - shift x to the right by n, using a logical shift\
 *   Can assume that 0 <= n <= 31\
 *   Examples: logicalShift(0x87654321,4) = 0x08765432\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 20\
 *   Rating: 3\
 */\
int logicalShift(int x, int n) \{\
  return 2;\
\}\
\
// Mystery:\
\
/*\
 * mystery1 - We need to figure out what it does?\
 *  Examples: mystery1(0xAABBCCDD, 1, 3) = 0xCCBBAADD\
 *            mystery1(0xAABBCCDD, 0, 2) = 0xAADDCCBB\
 *            mystery1(0xAABBCCDD, 0, 1) = 0xAABBDDCC\
 *  You may assume that 0 <= n <= 3, 0 <= m <= 3\
 *  Legal ops: ! ~ & ^ | + << >>\
 *  Max ops: 25\
 *  Rating: 2\
 */\
\
int mystery1(int x, int n, int m) \{\
    return 2;\
\}\
/*\
***********************\
The CS:APP Data Lab\
Directions to Students\
***********************\
\
Your goal is to modify your copy of bits.c so that it passes all the\
tests in btest without violating any of the coding guidelines.\
\
\
*********\
0. Files:\
*********\
\
Makefile        - Makes btest, fshow, and ishow\
README          - This file\
bits.c          - The file you will be modifying and handing in\
bits.h          - Header file\
btest.c         - The main btest program\
  btest.h       - Used to build btest\
  decl.c        - Used to build btest\
  tests.c       - Used to build btest\
  tests-header.c- Used to build btest\
dlc*            - Rule checking compiler binary (data lab compiler)\
driver.pl*      - Driver program that uses btest and dlc to autograde bits.c\
Driverhdrs.pm   - Header file for optional "Beat the Prof" contest\
fshow.c         - Utility for examining floating-point representations\
ishow.c         - Utility for examining integer representations\
\
***********************************************************\
1. Modifying bits.c and checking it for compliance with dlc\
***********************************************************\
\
IMPORTANT: Carefully read the instructions in the bits.c file before\
you start. These give the coding rules that you will need to follow if\
you want full credit.\
\
Use the dlc compiler (./dlc) to automatically check your version of\
bits.c for compliance with the coding guidelines:\
\
       unix> ./dlc bits.c\
\
dlc returns silently if there are no problems with your code.\
Otherwise it prints messages that flag any problems.  Running dlc with\
the -e switch:\
\
        unix> ./dlc -e bits.c\
\
causes dlc to print counts of the number of operators used by each function.\
\
Once you have a legal solution, you can test it for correctness using\
the ./btest program.\
\
*********************\
2. Testing with btest\
*********************\
\
The Makefile in this directory compiles your version of bits.c with\
additional code to create a program (or test harness) named btest.\
\
To compile and run the btest program, type:\
"README" 140L, 4564C                                                                                                                                                                                1,1           Top\
***********************\
The CS:APP Data Lab\
Directions to Students\
***********************\
\
Your goal is to modify your copy of bits.c so that it passes all the\
tests in btest without violating any of the coding guidelines.\
\
\
*********\
0. Files:\
*********\
\
Makefile        - Makes btest, fshow, and ishow\
README          - This file\
bits.c          - The file you will be modifying and handing in\
bits.h          - Header file\
btest.c         - The main btest program\
  btest.h       - Used to build btest\
  decl.c        - Used to build btest\
  tests.c       - Used to build btest\
  tests-header.c- Used to build btest\
dlc*            - Rule checking compiler binary (data lab compiler)\
driver.pl*      - Driver program that uses btest and dlc to autograde bits.c\
Driverhdrs.pm   - Header file for optional "Beat the Prof" contest\
fshow.c         - Utility for examining floating-point representations\
ishow.c         - Utility for examining integer representations\
\
***********************************************************\
1. Modifying bits.c and checking it for compliance with dlc\
***********************************************************\
\
IMPORTANT: Carefully read the instructions in the bits.c file before\
you start. These give the coding rules that you will need to follow if\
you want full credit.\
\
Use the dlc compiler (./dlc) to automatically check your version of\
bits.c for compliance with the coding guidelines:\
\
       unix> ./dlc bits.c\
\
dlc returns silently if there are no problems with your code.\
Otherwise it prints messages that flag any problems.  Running dlc with\
the -e switch:\
\
        unix> ./dlc -e bits.c\
\
causes dlc to print counts of the number of operators used by each function.\
\
Once you have a legal solution, you can test it for correctness using\
the ./btest program.\
\
*********************\
2. Testing with btest\
*********************\
\
The Makefile in this directory compiles your version of bits.c with\
additional code to create a program (or test harness) named btest.\
\
To compile and run the btest program, type:\
\
    unix> make btest\
    unix> ./btest [optional cmd line args]\
\
You will need to recompile btest each time you change your bits.c\
program. When moving from one platform to another, you will want to\
get rid of the old version of btest and generate a new one.  Use the\
commands:\
\
    unix> make clean\
    unix> make btest\
\
Btest tests your code for correctness by running millions of test\
cases on each function.  It tests wide swaths around well known corner\
cases such as Tmin and zero for integer puzzles, and zero, inf, and\
the boundary between denormalized and normalized numbers for floating\
point puzzles. When btest detects an error in one of your functions,\
it prints out the test that failed, the incorrect result, and the\
expected result, and then terminates the testing for that function.\
\
Here are the command line options for btest:\
/*\
 * CS:APP Data Lab\
 *\
 * <Please put your name and userid here>\
 *\
 * bits.c - Source file with your solutions to the Lab.\
 *          This is the file you will hand in to your instructor.\
 *\
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc\
 * compiler. You can still use printf for debugging without including\
 * <stdio.h>, although you might get a compiler warning. In general,\
 * it's not good practice to ignore compiler warnings, but in this\
 * case it's OK.\
 */\
\
#if 0\
/*\
 * Instructions to Students:\
 *\
 * STEP 1: Read the following instructions carefully.\
 */\
\
You will provide your solution to the Data Lab by\
editing the collection of functions in this source file.\
\
INTEGER CODING RULES:\
\
  Replace the "return" statement in each function with one\
  or more lines of C code that implements the function. Your code\
  must conform to the following style:\
\
  int Funct(arg1, arg2, ...) \{\
      /* brief description of how your implementation works */\
      int var1 = Expr1;\
      ...\
      int varM = ExprM;\
\
      varJ = ExprJ;\
      ...\
      varN = ExprN;\
      return ExprR;\
  \}\
\
  Each "Expr" is an expression using ONLY the following:\
  1. Integer constants 0 through 255 (0xFF), inclusive. You are\
      not allowed to use big constants such as 0xffffffff.\
  2. Function arguments and local variables (no global variables).\
  3. Unary integer operations ! ~\
  4. Binary integer operations & ^ | + << >>\
\
  Some of the problems restrict the set of allowed operators even further.\
  Each "Expr" may consist of multiple operators. You are not restricted to\
  one operator per line.\
\
  You are expressly forbidden to:\
  1. Use any control constructs such as if, do, while, for, switch, etc.\
  2. Define or use any macros.\
  3. Define any additional functions in this file.\
  4. Call any functions.\
  5. Use any other operations, such as &&, ||, -, or ?:\
"bits.c" 380L, 11026C                                                                                                                                                                               1,1           Top\
/*\
 * CS:APP Data Lab\
 *\
 * <Please put your name and userid here>\
 *\
 * bits.c - Source file with your solutions to the Lab.\
 *          This is the file you will hand in to your instructor.\
 *\
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc\
 * compiler. You can still use printf for debugging without including\
 * <stdio.h>, although you might get a compiler warning. In general,\
 * it's not good practice to ignore compiler warnings, but in this\
 * case it's OK.\
 */\
\
#if 0\
/*\
 * Instructions to Students:\
 *\
 * STEP 1: Read the following instructions carefully.\
 */\
\
You will provide your solution to the Data Lab by\
editing the collection of functions in this source file.\
\
INTEGER CODING RULES:\
\
  Replace the "return" statement in each function with one\
  or more lines of C code that implements the function. Your code\
  must conform to the following style:\
\
  int Funct(arg1, arg2, ...) \{\
      /* brief description of how your implementation works */\
      int var1 = Expr1;\
      ...\
      int varM = ExprM;\
\
      varJ = ExprJ;\
      ...\
      varN = ExprN;\
      return ExprR;\
  \}\
\
  Each "Expr" is an expression using ONLY the following:\
  1. Integer constants 0 through 255 (0xFF), inclusive. You are\
      not allowed to use big constants such as 0xffffffff.\
  2. Function arguments and local variables (no global variables).\
  3. Unary integer operations ! ~\
  4. Binary integer operations & ^ | + << >>\
\
  Some of the problems restrict the set of allowed operators even further.\
  Each "Expr" may consist of multiple operators. You are not restricted to\
  one operator per line.\
\
  You are expressly forbidden to:\
  1. Use any control constructs such as if, do, while, for, switch, etc.\
  2. Define or use any macros.\
  3. Define any additional functions in this file.\
  4. Call any functions.\
  5. Use any other operations, such as &&, ||, -, or ?:\
  6. Use any form of casting.\
  7. Use any data type other than int.  This implies that you\
     cannot use arrays, structs, or unions.\
\
\
  You may assume that your machine:\
  1. Uses 2s complement, 32-bit representations of integers.\
  2. Performs right shifts arithmetically.\
  3. Has unpredictable behavior when shifting an integer by more\
     than the word size.\
\
EXAMPLES OF ACCEPTABLE CODING STYLE:\
  /*\
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31\
   */\
  int pow2plus1(int x) \{\
     // exploit ability of shifts to compute powers of 2\
     int result= 1 << x;\
     // and add the 1\
     result = result + 1;\
     return result;\
  \}\
\
  /*\
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31\
   */\
  int pow2plus4(int x) \{\
     // exploit ability of shifts to compute powers of 2\
     int result = (1 << x);\
     result += 4;\
     return result;\
  \}\
\
FLOATING POINT CODING RULES\
\
For the problems that require you to implent floating-point operations,\
the coding rules are less strict.  You are allowed to use looping and\
conditional control.  You are allowed to use both ints and unsigneds.\
You can use arbitrary integer and unsigned constants.\
\
You are expressly forbidden to:\
  1. Define or use any macros.\
  2. Define any additional functions in this file.\
  3. Call any functions.\
  4. Use any form of casting.\
  5. Use any data type other than int or unsigned.  This means that you\
     cannot use arrays, structs, or unions.\
  6. Use any floating point data types, operations, or constants.\
\
\
NOTES:\
  1. Use the dlc (data lab checker) compiler (described in the handout) to\
     check the legality of your solutions.\
  2. Each function has a maximum number of operators (! ~ & ^ | + << >>)\
     that you are allowed to use for your implementation of the function.\
     The max operator count is checked by dlc. Note that '=' is not\
     counted; you may use as many of these as you want without penalty.\
  3. Use the btest test harness to check your functions for correctness.\
  4. Use the BDD checker to formally verify your functions\
  5. The maximum number of ops for each function is given in the\
     header comment for each function. If there are any inconsistencies\
     between the maximum ops in the writeup and in this file, consider\
     this file the authoritative source.\
\
/*\
 * STEP 2: Modify the following functions according the coding rules.\
 *\
 *   IMPORTANT. TO AVOID GRADING SURPRISES:\
 *   1. Use the dlc compiler to check that your solutions conform\
 *      to the coding rules.\
 *   2. Use the BDD checker to formally verify that your solutions produce\
 *      the correct answers.\
 */\
\
\
#endif\
/* Copyright (C) 1991-2018 Free Software Foundation, Inc.\
   This file is part of the GNU C Library.\
\
   The GNU C Library is free software; you can redistribute it and/or\
   modify it under the terms of the GNU Lesser General Public\
   License as published by the Free Software Foundation; either\
   version 2.1 of the License, or (at your option) any later version.\
\
   The GNU C Library is distributed in the hope that it will be useful,\
   but WITHOUT ANY WARRANTY; without even the implied warranty of\
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\
   Lesser General Public License for more details.\
\
   You should have received a copy of the GNU Lesser General Public\
   License along with the GNU C Library; if not, see\
   <http://www.gnu.org/licenses/>.  */\
/* This header is separate from features.h so that the compiler can\
   include it implicitly at the start of every compilation.  It must\
   not itself include <features.h> or any other header that includes\
   <features.h> because the implicit include comes before any feature\
   test macros that may be defined in a source file before it first\
   explicitly includes a system header.  GCC knows the name of this\
   header in order to preinclude it.  */\
/* glibc's intent is to support the IEC 559 math functionality, real\
   and complex.  If the GCC (4.9 and later) predefined macros\
   specifying compiler intent are available, use them to determine\
   whether the overall intent is to support these features; otherwise,\
   presume an older compiler has intent to support these features and\
   define these macros by default.  */\
/* wchar_t uses Unicode 10.0.0.  Version 10.0 of the Unicode Standard is\
   synchronized with ISO/IEC 10646:2017, fifth edition, plus\
   the following additions from Amendment 1 to the fifth edition:\
   - 56 emoji characters\
   - 285 hentaigana\
   - 3 additional Zanabazar Square characters */\
\
/*\
 * negate - return -x\
 *   Example: negate(1) = -1.\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 5\
 *   Rating: 2\
 */\
int negate(int x) \{\
  return 2;\
\}\
/*\
 *      to the coding rules.\
 *   2. Use the BDD checker to formally verify that your solutions produce\
 *      the correct answers.\
 */\
\
\
#endif\
/* Copyright (C) 1991-2018 Free Software Foundation, Inc.\
   This file is part of the GNU C Library.\
\
   The GNU C Library is free software; you can redistribute it and/or\
   modify it under the terms of the GNU Lesser General Public\
   License as published by the Free Software Foundation; either\
   version 2.1 of the License, or (at your option) any later version.\
\
   The GNU C Library is distributed in the hope that it will be useful,\
   but WITHOUT ANY WARRANTY; without even the implied warranty of\
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\
   Lesser General Public License for more details.\
\
   You should have received a copy of the GNU Lesser General Public\
   License along with the GNU C Library; if not, see\
   <http://www.gnu.org/licenses/>.  */\
/* This header is separate from features.h so that the compiler can\
   include it implicitly at the start of every compilation.  It must\
   not itself include <features.h> or any other header that includes\
   <features.h> because the implicit include comes before any feature\
   test macros that may be defined in a source file before it first\
   explicitly includes a system header.  GCC knows the name of this\
   header in order to preinclude it.  */\
/* glibc's intent is to support the IEC 559 math functionality, real\
   and complex.  If the GCC (4.9 and later) predefined macros\
   specifying compiler intent are available, use them to determine\
   whether the overall intent is to support these features; otherwise,\
   presume an older compiler has intent to support these features and\
   define these macros by default.  */\
/* wchar_t uses Unicode 10.0.0.  Version 10.0 of the Unicode Standard is\
   synchronized with ISO/IEC 10646:2017, fifth edition, plus\
   the following additions from Amendment 1 to the fifth edition:\
   - 56 emoji characters\
   - 285 hentaigana\
   - 3 additional Zanabazar Square characters */\
\
/*\
 * negate - return -x\
 *   Example: negate(1) = -1.\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 5\
 *   Rating: 2\
 */\
int negate(int x) \{\
  return 2;\
\}\
/*\
 * allOddBits - return 1 if all odd-numbered bits in word set to 1\
 *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 12\
 *   Rating: 2\
 */\
int allOddBits(int x) \{\
  return 2;\
\}\
\
// Not so hard:\
/*\
 * TMax - return maximum two's complement integer\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 4\
 *   Rating: 1\
 */\
int tmax(void) \{\
  return 2;\
\}\
\
/*\
 * bitOr - x|y using only ~ and &\
 *   Example: bitOr(6, 5) = 7\
 *   Legal ops: ~ &\
 *   Max ops: 8\
 *   Rating: 1\
 */\
\
int bitOr(int x, int y) \{\
  return 2;\
\}\
\
/*\
 * isEqual - return 1 if x == y, and 0 otherwise\
 *   Examples: isEqual(5,5) = 1, isEqual(4,5) = 0\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 5\
 *   Rating: 2\
 */\
\
int isEqual(int x, int y) \{\
  return 2;\
\}\
\
/*\
 * isTmax - returns 1 if x is the maximum, two's complement number,\
 *     and 0 otherwise\
 *   Legal ops: ! ~ & ^ | +\
 *   Max ops: 10\
 *   Rating: 2\
 */\
int isTmax(int x) \{\
  return 2;\
\}\
\
/*\
 * getByte - Extract byte n from word x\
 *   Bytes numbered from 0 (LSB) to 3 (MSB)\
 *   Examples: getByte(0x12345678,1) = 0x56\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 6\
 *   Rating: 2\
 */\
\
int getByte(int x, int n) \{\
  return 2;\
\}\
\
// Harder:\
\
/*\
 * replaceByte(x,n,c) - Replace byte n in x with c\
 *   Bytes numbered from 0 (LSB) to 3 (MSB)\
 *   Examples: replaceByte(0x12345678,1,0xab) = 0x1234ab78\
 *   You can assume 0 <= n <= 3 and 0 <= c <= 255\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 10\
 *   Rating: 3\
 */\
int replaceByte(int x, int n, int c) \{\
  return 2;\
\}\
\
/*\
 * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9')\
 *   Example: isAsciiDigit(0x35) = 1.\
 *            isAsciiDigit(0x3a) = 0.\
 *            isAsciiDigit(0x05) = 0.\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 15\
 *   Rating: 3\
 */\
int isAsciiDigit(int x) \{\
  return 2;\
\}\
\
/*\
 * addOK - Determine if can compute x+y without overflow\
 *   Example: addOK(0x80000000,0x80000000) = 0,\
 *            addOK(0x80000000,0x70000000) = 1,\
 *   Legal ops: ! ~ & ^ | + << >>\
 *   Max ops: 20\
 *   Rating: 3\
 */\
                                                                                                                                                                                                    283,1         71%}